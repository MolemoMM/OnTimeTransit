services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      POSTGRES_DB: ontimetransit
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SPRING_DATASOURCE_USERNAME} -d ontimetransit"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ontimetransit-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # User Service
  user-service:
    build:
      context: ./backend/user-service/user-service
    container_name: user-service
    ports:
      - "8089:8089"
    environment:
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ontimetransit
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_SHOW_SQL: false
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 5
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 2
      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 300000
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      MANAGEMENT_HEALTH_PROBES_ENABLED: true
      MANAGEMENT_SERVER_PORT: 8089
      JAVA_OPTS: -Xmx384m -Xms192m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Dspring.jpa.defer-datasource-initialization=true
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 180s
    init: true
    networks:
      - ontimetransit-network
    deploy:
      resources:
        limits:
          memory: 448M
          cpus: '0.5'
        reservations:
          memory: 224M
          cpus: '0.25'

  # Route Service
  route-service:
    build:
      context: ./backend/route-service/route-service
    container_name: route-service
    ports:
      - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ontimetransit
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      JAVA_OPTS: -Xmx256m -Xms128m
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 180s
    init: true
    networks:
      - ontimetransit-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Schedule Service
  schedule-service:
    build:
      context: ./backend/schedule-service/schedule-service
    container_name: schedule-service
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ontimetransit
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      JAVA_OPTS: -Xmx256m -Xms128m
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 180s
    init: true
    networks:
      - ontimetransit-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Ticket Service
  ticket-service:
    build:
      context: ./backend/ticket-service/ticket-service
    container_name: ticket-service
    ports:
      - "8087:8087"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ontimetransit
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      JAVA_OPTS: -Xmx256m -Xms128m
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 180s
    init: true
    networks:
      - ontimetransit-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Notification Service
  notification-service:
    build:
      context: ./backend/notification-service/notification-service
    container_name: notification-service
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ontimetransit
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      JAVA_OPTS: -Xmx256m -Xms128m
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    init: true
    networks:
      - ontimetransit-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Analytics Service
  analytics-service:
    build:
      context: ./backend/analytics-service/analytics-service
    container_name: analytics-service
    ports:
      - "8086:8086"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ontimetransit
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      JAVA_OPTS: -Xmx256m -Xms128m
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    init: true
    networks:
      - ontimetransit-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    init: true
    networks:
      - ontimetransit-network

  # Frontend
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:80"
    stdin_open: true
    tty: true
    depends_on:
      - user-service
      - route-service
      - ticket-service
      - schedule-service
      - analytics-service
      - notification-service
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    init: true
    networks:
      - ontimetransit-network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  ontimetransit-network:
    driver: bridge
